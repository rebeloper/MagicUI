// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios15.4-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MagicUI
import Combine
import Foundation
@_exported import MagicUI
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
public struct LoremIpsum {
  public static let atExtraExtraExtraShort: Swift.String
  public static let atExtraExtraShort: Swift.String
  public static let extraExtraExtraShort: Swift.String
  public static let extraExtraShort: Swift.String
  public static let extraShort: Swift.String
  public static let short: Swift.String
  public static let medium: Swift.String
  public static let normal: Swift.String
  public static let long: Swift.String
  public static let extraLong: Swift.String
  public static let oneParagraph: Swift.String
  public static let twoParagraphs: Swift.String
  public static let threeParagraphs: Swift.String
  public static let names: [Swift.String]
  public static func randomName() -> Swift.String
  public static let texts: [Swift.String]
  public static func randomText() -> Swift.String
  public static func amount(_ value: Swift.Int = randomInt(), multiplier: MagicUI.LoremIpsumAmountMultiplier = .none, type: MagicUI.LoremIpsumAmountType = .none) -> Swift.String
  public static func secondsAgo(_ value: Swift.Int = randomInt(59), isShort: Swift.Bool = true) -> Swift.String
  public static func minutesAgo(_ value: Swift.Int = randomInt(59), isShort: Swift.Bool = true) -> Swift.String
  public static func hoursAgo(_ value: Swift.Int = randomInt(24), isShort: Swift.Bool = true) -> Swift.String
  public static func daysAgo(_ value: Swift.Int = randomInt(30), isShort: Swift.Bool = true) -> Swift.String
  public static func weeksAgo(_ value: Swift.Int = randomInt(3), isShort: Swift.Bool = true) -> Swift.String
  public static func monthsAgo(_ value: Swift.Int = randomInt(11), isShort: Swift.Bool = true) -> Swift.String
  public static func yearsAgo(_ value: Swift.Int = randomInt(9), isShort: Swift.Bool = true) -> Swift.String
  public static func now() -> Swift.String
  public static func randomInt(_ max: Swift.Int = 99) -> Swift.Int
  public static func randomNumber() -> Swift.String
}
public enum LoremIpsumAmountMultiplier : Swift.String {
  case none
  case K
  case M
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LoremIpsumAmountType : Swift.String {
  case none
  case likes
  case views
  case comments
  case followers
  case following
  case subscribers
  case replies
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class MagicUIBundleReference {
  @objc deinit
}
extension SwiftUI.View {
  public func frame(square lenght: CoreGraphics.CGFloat?) -> some SwiftUI.View
  
  public func isHidden(_ shouldHide: Swift.Bool) -> some SwiftUI.View
  
  public func `if`<Content>(_ condition: @autoclosure () -> Swift.Bool, transform: (Self) -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
}
public struct Toast : SwiftUI.View {
  public var displayMode: MagicUI.ToastDisplayMode
  public var type: MagicUI.ToastType
  public var title: Swift.String?
  public var message: Swift.String?
  public var style: MagicUI.ToastStyle?
  public init(displayMode: MagicUI.ToastDisplayMode = .alert, type: MagicUI.ToastType, title: Swift.String? = nil, message: Swift.String? = nil, style: MagicUI.ToastStyle? = nil)
  public init(displayMode: MagicUI.ToastDisplayMode, type: MagicUI.ToastType, title: Swift.String? = nil)
  public var banner: some SwiftUI.View {
    get
  }
  public var hud: some SwiftUI.View {
    get
  }
  public var alert: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7MagicUI5ToastV4bodyQrvp", 0) __
}
public struct ToastModifier : SwiftUI.ViewModifier {
  public func main() -> some SwiftUI.View
  
  @_Concurrency.MainActor(unsafe) public func body(content: MagicUI.ToastModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s7MagicUI13ToastModifierV4body7contentQr05SwiftB005_ViewD8_ContentVyACG_tF", 0) __
}
extension SwiftUI.View {
  public func toast(isPresented: SwiftUI.Binding<Swift.Bool>, duration: Swift.Double = 2, tapToDismiss: Swift.Bool = true, offsetY: CoreGraphics.CGFloat = 0, toast: @escaping () -> MagicUI.Toast, onTap: (() -> ())? = nil, completion: (() -> ())? = nil) -> some SwiftUI.View
  
}
public enum ToastBannerAnimation {
  case slide, pop
  public static func == (a: MagicUI.ToastBannerAnimation, b: MagicUI.ToastBannerAnimation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ToastPreset {
  case progress, error, success, warning, info
  public static func == (a: MagicUI.ToastPreset, b: MagicUI.ToastPreset) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ToastDisplayMode : Swift.Equatable {
  case alert
  case hud
  case banner(_: MagicUI.ToastBannerAnimation)
  public static func == (a: MagicUI.ToastDisplayMode, b: MagicUI.ToastDisplayMode) -> Swift.Bool
}
public enum ToastType : Swift.Equatable {
  case success(_: SwiftUI.Color)
  case error(_: SwiftUI.Color)
  case systemImage(_: Swift.String, _: SwiftUI.Color)
  case image(_: Swift.String, _: SwiftUI.Color)
  case loading
  case regular
  public static func == (a: MagicUI.ToastType, b: MagicUI.ToastType) -> Swift.Bool
}
public enum BackgroundMaterial {
  case regularMaterial
  case thickMaterial
  case thinMaterial
  case ultraThinMaterial
  case ultraThickMaterial
  public static func == (a: MagicUI.BackgroundMaterial, b: MagicUI.BackgroundMaterial) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ToastStyle : Swift.Equatable {
  case style(backgroundMaterial: MagicUI.BackgroundMaterial? = .ultraThinMaterial, backgroundColor: SwiftUI.Color? = nil, titleColor: SwiftUI.Color? = nil, messageColor: SwiftUI.Color? = nil, titleFont: SwiftUI.Font? = nil, messageFont: SwiftUI.Font? = nil, imageMaxLength: CoreGraphics.CGFloat? = 20, systemImageFont: SwiftUI.Font? = nil, cornerRadius: CoreGraphics.CGFloat? = nil)
  public static func == (a: MagicUI.ToastStyle, b: MagicUI.ToastStyle) -> Swift.Bool
}
public class ToastManager : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($isPresented) public var isPresented: Swift.Bool {
    get
    set
    _modify
  }
  public var $isPresented: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($options) public var options: MagicUI.ToastOptions {
    get
    set
    _modify
  }
  public var $options: Combine.Published<MagicUI.ToastOptions>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init()
  public func present(_ displayMode: MagicUI.ToastDisplayMode, type: MagicUI.ToastType = .regular, title: Swift.String? = nil, message: Swift.String? = nil, style: MagicUI.ToastStyle? = nil)
  public func present(_ displayMode: MagicUI.ToastDisplayMode, type: MagicUI.ToastType = .regular, title: Swift.String? = nil, message: Swift.String? = nil, backgroundMaterial: MagicUI.BackgroundMaterial? = nil, backgroundColor: SwiftUI.Color? = nil, titleColor: SwiftUI.Color? = nil, messageColor: SwiftUI.Color? = nil, titleFont: SwiftUI.Font? = nil, messageFont: SwiftUI.Font? = nil, imageMaxLength: CoreGraphics.CGFloat? = 20, systemImageFont: SwiftUI.Font? = nil, cornerRadius: CoreGraphics.CGFloat? = nil)
  public func present(options: MagicUI.ToastOptions)
  public func present(_ displayMode: MagicUI.ToastDisplayMode, type: MagicUI.ToastType = .regular, title: Swift.String, message: Swift.String, style: MagicUI.ToastStyle? = nil)
  public func present(_ displayMode: MagicUI.ToastDisplayMode, type: MagicUI.ToastType = .regular, title: Swift.String, message: Swift.String? = nil, style: MagicUI.ToastStyle? = nil)
  public func present(_ displayMode: MagicUI.ToastDisplayMode, type: MagicUI.ToastType = .regular, title: Swift.String? = nil, message: Swift.String, style: MagicUI.ToastStyle? = nil)
  public func present(_ preset: MagicUI.ToastPreset, _ displayMode: MagicUI.ToastDisplayMode, message: Swift.String, style: MagicUI.ToastStyle? = nil)
  public func present(_ displayMode: MagicUI.ToastDisplayMode, title: Swift.String, message: Swift.String, style: MagicUI.ToastStyle? = nil)
  public func present(_ displayMode: MagicUI.ToastDisplayMode, title: Swift.String, style: MagicUI.ToastStyle? = nil)
  public func present(_ displayMode: MagicUI.ToastDisplayMode, message: Swift.String, style: MagicUI.ToastStyle? = nil)
  
  #if compiler(>=5.3) && $AsyncAwait
  public func present(_ displayMode: MagicUI.ToastDisplayMode = .hud, type: MagicUI.ToastType = .loading, title: Swift.String? = nil, message: Swift.String? = nil, style: MagicUI.ToastStyle? = nil, alertManager: MagicUI.AlertManager? = nil, action: @escaping () async throws -> ()) async throws
  #endif

  public func hide()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct ToastOptions {
  public init(displayMode: MagicUI.ToastDisplayMode? = nil, type: MagicUI.ToastType? = nil, title: Swift.String? = nil, message: Swift.String? = nil, style: MagicUI.ToastStyle? = nil)
}
public class AlertManager : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($isAlertPresented) public var isAlertPresented: Swift.Bool {
    get
    set
    _modify
  }
  public var $isAlertPresented: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isConfirmationDialogPresented) public var isConfirmationDialogPresented: Swift.Bool {
    get
    set
    _modify
  }
  public var $isConfirmationDialogPresented: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($options) public var options: MagicUI.AlertOptions {
    get
    set
    _modify
  }
  public var $options: Combine.Published<MagicUI.AlertOptions>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init()
  public func present(options: MagicUI.AlertOptions)
  public func present(_ type: MagicUI.AlertType, title: Swift.String? = nil, message: Swift.String? = nil, actions: [MagicUI.AlertAction]? = nil)
  public func present(_ preset: MagicUI.AlertPreset, _ type: MagicUI.AlertType, message: Swift.String, actions: [MagicUI.AlertAction]? = nil)
  public func present(_ error: Swift.Error, actions: [MagicUI.AlertAction]? = nil)
  public func hide()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public enum AlertPreset {
  case error, success, warning, info
  public static func == (a: MagicUI.AlertPreset, b: MagicUI.AlertPreset) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AlertType {
  case alert, confirmationDialog
  public static func == (a: MagicUI.AlertType, b: MagicUI.AlertType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct AlertOptions {
  public init(type: MagicUI.AlertType = .alert, title: Swift.String? = nil, message: Swift.String? = nil, actions: [MagicUI.AlertAction]? = nil)
}
public struct AlertAction : Swift.Identifiable {
  public let id: Foundation.UUID
  public init(role: SwiftUI.ButtonRole? = nil, label: Swift.String, action: (() -> Swift.Void)? = nil)
  public init(role: SwiftUI.ButtonRole? = nil, label: MagicUI.AlertActionLabel, action: (() -> Swift.Void)? = nil)
  public typealias ID = Foundation.UUID
}
public enum AlertActionLabel : Swift.String {
  case ok
  case cancel
  case agree
  case later
  case remindMeLater
  case skip
  case dontAskAgain
  case dismiss
  case forward
  case back
  case previous
  case next
  case yes
  case no
  case confirm
  case deny
  case open
  case close
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@dynamicMemberLookup public class WebViewStore : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($wkWebView) public var wkWebView: WebKit.WKWebView {
    get
    set
  }
  public var $wkWebView: Combine.Published<WebKit.WKWebView>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(wkWebView: WebKit.WKWebView = WKWebView())
  public subscript<T>(dynamicMember keyPath: Swift.KeyPath<WebKit.WKWebView, T>) -> T {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct WebView : SwiftUI.View, SwiftUI.UIViewRepresentable {
  public let wkWebView: WebKit.WKWebView
  public init(wkWebView: WebKit.WKWebView)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: SwiftUI.UIViewRepresentableContext<MagicUI.WebView>) -> WebKit.WKWebView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: WebKit.WKWebView, context: SwiftUI.UIViewRepresentableContext<MagicUI.WebView>)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = WebKit.WKWebView
}
extension SwiftUI.Color {
  public init(hex: Swift.String)
}
extension SwiftUI.Color {
  public static let systemRed: SwiftUI.Color
  public static let systemGreen: SwiftUI.Color
  public static let systemBlue: SwiftUI.Color
  public static let systemOrange: SwiftUI.Color
  public static let systemYellow: SwiftUI.Color
  public static let systemPink: SwiftUI.Color
  public static let systemPurple: SwiftUI.Color
  public static let systemTeal: SwiftUI.Color
  public static let systemIndigo: SwiftUI.Color
  public static let systemBrown: SwiftUI.Color
  public static let systemMint: SwiftUI.Color
  public static let systemCyan: SwiftUI.Color
  public static let systemGray: SwiftUI.Color
  public static let systemGray2: SwiftUI.Color
  public static let systemGray3: SwiftUI.Color
  public static let systemGray4: SwiftUI.Color
  public static let systemGray5: SwiftUI.Color
  public static let systemGray6: SwiftUI.Color
  public static let systemBlack: SwiftUI.Color
  public static let systemWhite: SwiftUI.Color
  public static let label: SwiftUI.Color
  public static let secondaryLabel: SwiftUI.Color
  public static let tertiaryLabel: SwiftUI.Color
  public static let quaternaryLabel: SwiftUI.Color
  public static let link: SwiftUI.Color
  public static let placeholderText: SwiftUI.Color
  public static let separator: SwiftUI.Color
  public static let opaqueSeparator: SwiftUI.Color
  public static let systemBackground: SwiftUI.Color
  public static let secondarySystemBackground: SwiftUI.Color
  public static let tertiarySystemBackground: SwiftUI.Color
  public static let systemGroupedBackground: SwiftUI.Color
  public static let secondarySystemGroupedBackground: SwiftUI.Color
  public static let tertiarySystemGroupedBackground: SwiftUI.Color
  public static let systemFill: SwiftUI.Color
  public static let secondarySystemFill: SwiftUI.Color
  public static let tertiarySystemFill: SwiftUI.Color
  public static let quaternarySystemFill: SwiftUI.Color
  public static let lightText: SwiftUI.Color
  public static let darkText: SwiftUI.Color
  public static let fixedBlack: SwiftUI.Color
  public static let fixedDarkGray: SwiftUI.Color
  public static let fixedLightGray: SwiftUI.Color
  public static let fixedWhite: SwiftUI.Color
  public static let fixedGray: SwiftUI.Color
  public static let fixedRed: SwiftUI.Color
  public static let fixedGreen: SwiftUI.Color
  public static let fixedBlue: SwiftUI.Color
  public static let fixedCyan: SwiftUI.Color
  public static let fixedYellow: SwiftUI.Color
  public static let fixedMagenta: SwiftUI.Color
  public static let fixedOrange: SwiftUI.Color
  public static let fixedPurple: SwiftUI.Color
  public static let fixedBrown: SwiftUI.Color
  public static let fixedClear: SwiftUI.Color
}
extension SwiftUI.Color {
  public func uiColor() -> UIKit.UIColor
}
extension SwiftUI.Color {
  public static var random: SwiftUI.Color {
    get
  }
  public static var systemRandom: SwiftUI.Color {
    get
  }
}
@_Concurrency.MainActor(unsafe) public struct ContentView<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(licenseKey: Swift.String, content: @escaping () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7MagicUI11ContentViewV4bodyQrvp", 0) __<Content>
}
extension MagicUI.WebView {
  @_Concurrency.MainActor public func load(url: Foundation.URL, webViewStore: MagicUI.WebViewStore, isActive: SwiftUI.Binding<Swift.Bool>? = nil) -> some SwiftUI.View
  
}
public struct LoremPicsum {
  public static let foodAndDrinkName: Swift.String
  public static let backToSchoolName: Swift.String
  public static let natureName: Swift.String
  public static let architectureName: Swift.String
  public static let businessName: Swift.String
  public static let fashionName: Swift.String
  public static let healthName: Swift.String
  public static let interiorName: Swift.String
  public static let streetName: Swift.String
  public static let technologyName: Swift.String
  public static let textureName: Swift.String
  public static let travelName: Swift.String
  public static let athleticsName: Swift.String
  public static let historyName: Swift.String
  public static let person0Name: Swift.String
  public static let person1Name: Swift.String
  public static let person2Name: Swift.String
  public static let person3Name: Swift.String
  public static let person4Name: Swift.String
  public static let person5Name: Swift.String
  public static let person6Name: Swift.String
  public static let person7Name: Swift.String
  public static let person8Name: Swift.String
  public static let person9Name: Swift.String
  public static var foodAndDrink: SwiftUI.Image {
    get
  }
  public static var backToSchool: SwiftUI.Image {
    get
  }
  public static var nature: SwiftUI.Image {
    get
  }
  public static var architecture: SwiftUI.Image {
    get
  }
  public static var business: SwiftUI.Image {
    get
  }
  public static var fashion: SwiftUI.Image {
    get
  }
  public static var health: SwiftUI.Image {
    get
  }
  public static var interior: SwiftUI.Image {
    get
  }
  public static var street: SwiftUI.Image {
    get
  }
  public static var technology: SwiftUI.Image {
    get
  }
  public static var texture: SwiftUI.Image {
    get
  }
  public static var travel: SwiftUI.Image {
    get
  }
  public static var athletics: SwiftUI.Image {
    get
  }
  public static var history: SwiftUI.Image {
    get
  }
  public static var person0: SwiftUI.Image {
    get
  }
  public static var person1: SwiftUI.Image {
    get
  }
  public static var person2: SwiftUI.Image {
    get
  }
  public static var person3: SwiftUI.Image {
    get
  }
  public static var person4: SwiftUI.Image {
    get
  }
  public static var person5: SwiftUI.Image {
    get
  }
  public static var person6: SwiftUI.Image {
    get
  }
  public static var person7: SwiftUI.Image {
    get
  }
  public static var person8: SwiftUI.Image {
    get
  }
  public static var person9: SwiftUI.Image {
    get
  }
  public static let imageNames: [Swift.String]
  public static let images: [SwiftUI.Image]
  public static func randomImageName() -> Swift.String
  public static func randomImage() -> SwiftUI.Image
  public static let peopleNames: [Swift.String]
  public static let people: [SwiftUI.Image]
  public static func randomPersonName() -> Swift.String
  public static func randomPerson() -> SwiftUI.Image
}
extension MagicUI.LoremIpsumAmountMultiplier : Swift.Equatable {}
extension MagicUI.LoremIpsumAmountMultiplier : Swift.Hashable {}
extension MagicUI.LoremIpsumAmountMultiplier : Swift.RawRepresentable {}
extension MagicUI.LoremIpsumAmountType : Swift.Equatable {}
extension MagicUI.LoremIpsumAmountType : Swift.Hashable {}
extension MagicUI.LoremIpsumAmountType : Swift.RawRepresentable {}
extension MagicUI.ToastBannerAnimation : Swift.Equatable {}
extension MagicUI.ToastBannerAnimation : Swift.Hashable {}
extension MagicUI.ToastPreset : Swift.Equatable {}
extension MagicUI.ToastPreset : Swift.Hashable {}
extension MagicUI.BackgroundMaterial : Swift.Equatable {}
extension MagicUI.BackgroundMaterial : Swift.Hashable {}
extension MagicUI.AlertPreset : Swift.Equatable {}
extension MagicUI.AlertPreset : Swift.Hashable {}
extension MagicUI.AlertType : Swift.Equatable {}
extension MagicUI.AlertType : Swift.Hashable {}
extension MagicUI.AlertActionLabel : Swift.Equatable {}
extension MagicUI.AlertActionLabel : Swift.Hashable {}
extension MagicUI.AlertActionLabel : Swift.RawRepresentable {}
